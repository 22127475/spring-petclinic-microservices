pipeline {
    agent any

    environment {
        REPO_URL = 'https://github.com/22127475/spring-petclinic-microservices.git'
        IMAGE_NAME = '22127475/spring-petclinic'
        HELM_DIR = 'helm_chart'
        namespace = "dev"
        DOMAIN = "dev.com"    
    }

    stages {
        stage('Build and push to docker hub') {
            steps {
                script{
                    docker.withRegistry("https://index.docker.io/v1/", env.DOCKERHUB_CREDENTIALS_ID){
                        try {
                            commit_id = 'latest'
                            def mvnCommand = "./mvnw.cmd clean install -P buildDocker -DskipTests "+
                                             "-Ddocker.image.prefix=${env.DOCKER_REGISTRY} "+
                                             "-Ddocker.image.tag.commit=${commit_id} "+
                                             "-Dcontainer.build.extraarg=\"--push\""

                            echo "Executing Maven command on Windows to build images: ${mvnCommand}"

                            bat mvnCommand
                            echo "Maven build completed successfully."
                        }
                        catch (e) {
                            echo "Error building images via Maven: ${e.getMessage()}"
                            error(message: "Failed to build images via Maven")
                        }
                    }
                }
            }
        }
        stage('Prepare services') {
            steps {
                script {
                    services = [
                        [name: 'config-server', port: 8888],
                        [name: 'discovery-server', port: 8761 ],
                        [name: 'api-gateway', port: 8080],
                        [name: 'customers-service', port: 8081],
                        [name: 'visits-service', port: 8882], 
                        [name: 'vets-service', port: 8883],
                        [name: 'genai-service', port: 8884],                        
                        [name: 'admin-server', port: 9090],                         
                    ]

                    def yamlLines = [
                        "namespace: ${namespace}",
                        "ingress:",
                        "  enabled: true",
                        "  host: ${DOMAIN}",
                        "services:"
                    ]
                    
                    for (service in services) {
                        def tag = 'latest'
                
                        echo "Tag for ${service.name} (${service.branch}): ${tag}"
                        // Add service to YAML lines
                        yamlLines << "  ${service.name}:"
                        yamlLines << "    enabled: true"
                        yamlLines << "    image:"
                        yamlLines << "      repository: ${IMAGE_NAME}-${service.name}"
                        yamlLines << "      tag: ${tag}"
                        yamlLines << "    port: ${service.port}"

                        writeFile file: 'generated-values.yaml', text: yamlLines.join('\n')
                    }
                }
            }
        }

        stage('Deploy with helm') {
            steps {
                script {
                    withCredentials([file(credentialsId: 'k8s-secret-file', variable: 'KUBECONFIG')]) {
                            bat """
                                helm upgrade --install petclinic ${HELM_DIR} --namespace dev --create-namespace --values=generated-values.yaml --force
                            """
                    }
                }
            }
        }
    }
}
