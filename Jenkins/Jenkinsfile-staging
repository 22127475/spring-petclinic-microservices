// pipeline {
//     agent any

//     environment {
//         DOCKERHUB_CREDENTIALS_ID = 'Docker_Jenkins_CD'
//         DOCKER_REGISTRY = '22127475'
//         HELM_DIR = 'helm_chart'
//         namespace = 'staging'
//         DOMAIN = 'staging.com'
//         IMAGE_NAME = '22127475/spring-petclinic'
//     }
        
//     stages {
//         stage('Build and Push Images to Docker Hub') {
//             when {
//                 expression {
//                     return env.GIT_BRANCH?.startsWith('origin/tags/')
//                 }
//             }
//             steps {
//                 script {
//                     docker.withRegistry("https://index.docker.io/v1/", env.DOCKERHUB_CREDENTIALS_ID) { 
//                         try {
//                             def output = bat(script: 'git describe --tags', returnStdout: true).trim()
//                             def lines = output.readLines()
//                             LATEST_TAG = lines[lines.size() - 1]
// // 
//                             LATEST_TAG = 'v1.2.3'
//                             // 
                            
//                             echo "Building Docker image for tag ${LATEST_TAG}"
                            
//                             def mvnCommand = "./mvnw.cmd clean install -P buildDocker -DskipTests " +
//                                 "-Ddocker.image.prefix=${env.DOCKER_REGISTRY} " +
//                                 "-Ddocker.image.tag.commit=${LATEST_TAG} " +
//                                 "-Dcontainer.build.extraarg=\"--push\""
//                             // bat mvnCommand
//                         } catch (e) {
//                                 echo "Build failed: ${e.getMessage()}"
//                                 error("Docker image build failed")
//                         }
//                     }
//                 }
//             }
//         }

//         stage('prepare helm chart') {
//             when {
//                 expression {
//                     return env.GIT_BRANCH?.startsWith('origin/tags/')
//                 }
//             }
//             steps {
//                 script {
//                     services = [
//                         [name: 'config-server', branch: 'main', port: 8888],
//                         [name: 'discovery-server', branch: 'main',  port: 8761 ],
//                         [name: 'api-gateway', branch: 'main',  port: 8080],
//                         [name: 'customers-service',  port: 8081],
//                         [name: 'visits-service',   port: 8882], 
//                         [name: 'vets-service',   port: 8883],
//                         [name: 'genai-service', port: 8884],                        
//                         [name: 'admin-server', port: 9090],                         
//                     ]

//                     def yamlLines = [
//                         "namespace: ${namespace}",

//                         "ingress:",
//                         "  enabled: true",
//                         "  host: ${DOMAIN}",
//                         "services:"
//                     ]
                            
//                     for (service in services) {
//                         yamlLines << "  ${service.name}:"
//                         yamlLines << "    enabled: true"
//                         yamlLines << "    image:"
//                         yamlLines << "      repository: ${IMAGE_NAME}-${service.name}"
//                         yamlLines << "      tag: ${LATEST_TAG}"
//                         yamlLines << "    port: ${service.port}"

//                         writeFile file: 'generated-values.yaml', text: yamlLines.join('\n')
//                     }

//                     bat "type generated-values.yaml"
//                 }
//             }
//         }
        

//         stage('Deploy with helm') {
//             when {
//                 expression {
//                     return env.GIT_BRANCH?.startsWith('origin/tags/')
//                 }
//             }
//             steps {
//                 script {
//                     withCredentials([file(credentialsId: 'k8s-secret-file', variable: 'KUBECONFIG')]) {
//                             bat """
//                                 helm upgrade --install petclinic ${HELM_DIR} --namespace ${namespace} --create-namespace --values=generated-values.yaml --force
//                             """
//                     }   
//                 }
//             }
//         }
//     }   
// }
pipeline {
    agent any

    environment {
        DOCKERHUB_CREDENTIALS_ID = 'Docker_Jenkins_CD'
        DOCKER_REGISTRY = '22127475'
        HELM_DIR = 'helm_chart'
        namespace = 'staging'
        DOMAIN = 'staging.com'
        IMAGE_NAME = '22127475/spring-petclinic'
    }
        
    stages {
        stage('check') {
            GIT_REF = bat(script: 'git name-rev --name-only HEAD', returnStdout: true).trim()
            echo "GIT_REF = ${GIT_REF}"
        }
        stage('test') {
            when {
                expression {
                    return GIT_REF.startsWith('tags/')
                }
            }
            steps {
                script {
                    bat "echo 'test'"
                }
            }
        }
    }
}
